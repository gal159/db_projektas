security:
    role_hierarchy:
        ROLE_USER: ROLE_USER
        ROLE_VADYBININKAS: [ROLE_USER]
        ROLE_ADMINISTRATORIUS: [ROLE_VADYBININKAS, ROLE_USER]
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        App\Entity\Naudotojas:
            algorithm: plaintext
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
#        users_in_memory: { memory: null }
        app_user_provider:
            entity:
                class: App\Entity\Naudotojas
                property: username
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            form_login:
                login_path: app_home
                check_path: app_home
                always_use_default_target_path: false
                default_target_path: app_namai
            switch_user: true
            logout:
                path: app_logout
                target: app_home


            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
       - { path: ^/namai, roles: ROLE_USER }
       - { path: ^/vadybininkas, roles: ROLE_VADYBININKAS }
       - { path: ^/administratorius, roles: ROLE_ADMINISTRATORIUS }

#        - { path: ^/, roles: IS_AUTHENTICATED_ANONYMOUSLY }  # Prisijungimo forma prieinama visiems

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
